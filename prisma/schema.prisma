// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int           @id @default(autoincrement())
  fullname             String?
  avatarUrl            String?
  email                String        @unique
  isEmailVerified      Boolean       @default(false)
  hashedPassword       String?
  provider             AccountType   @default(DEFAULT)

  activateTokens       ActivateToken[]
  passwordResetTokens  PasswordResetToken[]
  schools              MemberOnSchools[]
  subjects             MemberOnSubject[]
  groups               MemberOnGroup[]

  createdAt            DateTime      @default(now()) 
  updatedAt            DateTime      @updatedAt
}

enum AccountType {
  DEFAULT
  GOOGLE
}

model ActivateToken {
  id              Int       @id @default(autoincrement())
  token           String    @unique
  activatedAt     DateTime?
  userId          Int
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model PasswordResetToken {
  id              Int       @id @default(autoincrement())
  token           String    @unique
  resetAt         DateTime?
  userId          Int
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model School {
  id                String       @id @default(cuid())
  name              String
  logoUrl           String?
  description       String?

  members           MemberOnSchools[]
  subjects          Subject[]
  membersOnSubject  MemberOnSubject[]
  groups            Group[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model MemberOnSchools {
  userId          Int
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  role            Role      @default(STUDENT)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@id([userId, schoolId])
  @@unique([userId, schoolId])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  TEACHER
  STUDENT
}

model Subject {
  id              Int       @id @default(autoincrement())
  name            String
  imageUrl        String?

  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  users           MemberOnSubject[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model MemberOnSubject {
  subjectId       Int
  subject         Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  userId          Int
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  role            SubjectRole   @default(STUDENT)

  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@id([subjectId, userId])
  @@unique([subjectId, userId])
}

enum SubjectRole {
  TEACHER
  STUDENT
}

model Group {
  id              Int       @id @default(autoincrement())
  name            String

  parentId        Int?
  parent          Group?    @relation("GroupToGroup", fields: [parentId], references: [id], onDelete: Cascade)

  children        Group[]   @relation("GroupToGroup")

  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  members         MemberOnGroup[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model MemberOnGroup {
  groupId         Int
  group           Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId          Int
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupId, userId])
  @@unique([groupId, userId])
}